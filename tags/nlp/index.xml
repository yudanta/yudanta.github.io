<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NLP on Ydn&#39;s personal blog.</title>
    <link>https://yudanta.github.io/tags/nlp/</link>
    <description>Recent content in NLP on Ydn&#39;s personal blog.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Dec 2021 18:28:17 -0500</lastBuildDate><atom:link href="https://yudanta.github.io/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Indonesian Simple Sentence Segmentation</title>
      <link>https://yudanta.github.io/posts/indonesian-simple-sentence-segmentation/</link>
      <pubDate>Sat, 11 Dec 2021 18:28:17 -0500</pubDate>
      
      <guid>https://yudanta.github.io/posts/indonesian-simple-sentence-segmentation/</guid>
      <description>Hi&amp;hellip; ðŸ‘‹ It&amp;rsquo;s been a while since my last blogpost (it&amp;rsquo;s not a while, its a very long time tbh&amp;hellip; ðŸ˜‚) but that&amp;rsquo;s fine I guess, been busy lately and I think a lil bit spare some time for writing (again) is a good for keeping the mood and my sanity LOL ðŸ¤–
In this post, I will write a post about sentence-segmentation or sentence segmenter that I wrote years ago (around 2015-2016) during the time I am completing my master thesis.</description>
    </item>
    
    <item>
      <title>Hello Fuse Project, From Semeru</title>
      <link>https://yudanta.github.io/posts/hello-fuse-project-from-semeru/</link>
      <pubDate>Mon, 07 Jun 2021 21:59:10 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/hello-fuse-project-from-semeru/</guid>
      <description>Hello, welcoming our new born baby, Fuse Project! an Indonesian NLP model in REST API.
 TLDR; Fuse is our side-project which are focuses on developing Indonesian NLP models, anyone can try the model here: https://fuse-id-nlp.herokuapp.com/docs
 A few months ago me and my friend Repapheng were having a conversation about current NLP models especially for Indonesian language. Fun fact is, We both are graduated student with NLP as focus research for final thesis.</description>
    </item>
    
    <item>
      <title>Deploy Spacy Ner With Fast Api</title>
      <link>https://yudanta.github.io/posts/deploy-spacy-ner-with-fast-api/</link>
      <pubDate>Thu, 28 Jan 2021 19:25:46 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/deploy-spacy-ner-with-fast-api/</guid>
      <description>In my previous post here: https://yudanta.github.io/posts/train-an-indonesian-ner-from-a-blank-spacy-model/, I shared about how to train simple Indonesian NER model with SpaCy. The detail of training process can be found in that article. In this post, we will focus on how to deploy the model as a REST API with FastAPI, so the users can query to our NER model via REST API. However, in this tutorial, will focus on how to create simple FastAPI project and load pre-trained NER model, if you are not familiar with FastAPI yet, please go to the FastAPI documentation site here: https://fastapi.</description>
    </item>
    
    <item>
      <title>Train an Indonesian NER From a Blank SpaCy Model</title>
      <link>https://yudanta.github.io/posts/train-an-indonesian-ner-from-a-blank-spacy-model/</link>
      <pubDate>Mon, 26 Oct 2020 23:23:57 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/train-an-indonesian-ner-from-a-blank-spacy-model/</guid>
      <description>So, how we train a Named Entity Recognition model in SpaCy using our own dataset? long story short, though the title is in English, but this time I will write the story in Indonesian, since the model is an Indonesian Named Entity Recognition.
Jadi&amp;hellip; bagi yang ingin bikin model untuk keperluan &amp;ldquo;sequence-tagging&amp;rdquo; seperti Ekstraksi Entitas dan Pengenalan Entitas, maka biar tidak pusing atau pusing dengan bikin model pakai stack LSTM atau LSTM+CRF seperti kebanyakan yang ada di tutorial-tutorial itu, apalagi pakai embedding kaya word2vec dan glove dan bert fang femes itu kan overkill&amp;hellip; dan tentunya bakal lama, ya to ya?</description>
    </item>
    
    <item>
      <title>Series 3 Exporting LSTM Gender Classification and Serving With Flask</title>
      <link>https://yudanta.github.io/posts/series-3-exporting-lstm-gender-classification-and-serving-with-flask/</link>
      <pubDate>Mon, 12 Oct 2020 22:38:16 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/series-3-exporting-lstm-gender-classification-and-serving-with-flask/</guid>
      <description>Hello again, so this is the last part of our series about developing gender classification model with deep learning approach. in the previous post we know already how to deploy our model directly into TFServing and run the service inside a docker container, if you did not read the previous series please follow this links:
 Training LSTM Model for gender classification Serving model with Tensorflow Serving  For the last part of our series, we will learn and deploy our trained model with Flask, so it will attached to your web application built with flask.</description>
    </item>
    
    <item>
      <title>Series 2 Exporting LSTM Gender Classification and Serving With Tensorflowserving</title>
      <link>https://yudanta.github.io/posts/series-2-exporting-lstm-gender-classification-and-serving-with-tensorflowserving/</link>
      <pubDate>Thu, 01 Oct 2020 14:17:47 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/series-2-exporting-lstm-gender-classification-and-serving-with-tensorflowserving/</guid>
      <description>So this is the second part of the series, in the previous part we successfully train our model and test the model directly from trained model instance. in this part we will export the model and serve the model with tensorflow serving so it can be accessed with REST api or gRPC endpoints, in short you can serve your model like in production, so others can performing request to ask a gender prediction to your model.</description>
    </item>
    
    <item>
      <title>Series 1 LSTM Gender Classification Tensorflow</title>
      <link>https://yudanta.github.io/posts/series-1-lstm-gender-classification-tensorflow/</link>
      <pubDate>Sun, 27 Sep 2020 22:36:58 +0700</pubDate>
      
      <guid>https://yudanta.github.io/posts/series-1-lstm-gender-classification-tensorflow/</guid>
      <description>Hello&amp;hellip; this post will be part of a serial posts about how we using deep learning approach for simple text classification model, starting from training the model until serving the model into &amp;ldquo;production ready&amp;rdquo; application with TensorflowServing or Flask. This series posts will be divided into 3 posts, the first one is preparing and training our simple model to recognize a gender based on name.
Lets say we want a model for our application needs to predict user&amp;rsquo;s gender based on their name, so at first we have a datasets a pair of name and gender in .</description>
    </item>
    
  </channel>
</rss>
